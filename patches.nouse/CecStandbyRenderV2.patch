commit a5202dc3356497b5c1a190470eca585655e5ea79
Author: Matus Kral <matuskral@me.com>
Date:   Sun Nov 23 17:25:52 2014 +0200

    on TV going standby or inactive source, renderer is forced to lowfps saving lot CPU cycles

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index 415e4c2..f82872e 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -405,6 +405,9 @@ CApplication::CApplication(void)
   m_skinReloading = false;
   m_skinReverting = false;
   m_loggingIn = false;
+  m_cecStandby = false;
+  m_cecStandbyRun = 0;
+  m_res.strMode = "";
 
 #ifdef HAS_GLX
   XInitThreads();
@@ -469,7 +471,10 @@ bool CApplication::OnEvent(XBMC_Event& newEvent)
   {
     case XBMC_QUIT:
       if (!g_application.m_bStop)
+      {
         CApplicationMessenger::Get().Quit();
+        g_application.SetCecStandby(false);
+      }
       break;
     case XBMC_KEYDOWN:
       g_application.OnKey(g_Keyboard.ProcessKeyDown(newEvent.key.keysym));
@@ -1015,6 +1021,8 @@ bool CApplication::CreateGUI()
             info.iWidth,
             info.iHeight,
             info.strMode.c_str());
+
+  m_res = info;
   g_windowManager.Initialize();
 
   return true;
@@ -1688,6 +1696,8 @@ void CApplication::OnSettingChanged(const CSetting *setting)
     m_replayGainSettings.iNoGainPreAmp = ((CSettingInt*)setting)->GetValue();
   else if (StringUtils::EqualsNoCase(settingId, "musicplayer.replaygainavoidclipping"))
     m_replayGainSettings.bAvoidClipping = ((CSettingBool*)setting)->GetValue();
+  else if (StringUtils::EqualsNoCase(settingId, "videoscreen.screenmode") || StringUtils::EqualsNoCase(settingId, "videoscreen.resolution"))
+    m_res = CDisplaySettings::Get().GetResolutionInfo(CDisplaySettings::Get().GetDisplayResolution());
 }
 
 void CApplication::OnSettingAction(const CSetting *setting)
@@ -2186,6 +2191,37 @@ float CApplication::GetDimScreenSaverLevel() const
   return 100.0f;
 }
 
+void CApplication::SetCecStandby(bool status, bool force)
+{
+  if (force && g_application.m_bInitializing)
+  {
+    m_cecStandbyRun++;
+    return;
+  }
+
+  if (status == m_cecStandby && !force)
+    return;
+
+  CLog::Log(LOGDEBUG, "%s is %x, se %d, sa %d, csr %d", __FUNCTION__, (int)status, m_screenSaver ? 1:0, m_bScreenSave, m_cecStandbyRun);
+
+  m_cecStandby = status;
+  if (g_application.m_bStop)
+    return;
+
+  //SetRenderGUI(!status);
+  if (!status)
+  {
+    if (!force && IsInScreenSaver())
+      WakeUpScreenSaverAndDPMS();
+
+    g_Windowing.UpdateResolutions();
+    g_graphicsContext.SetFullScreenVideo(g_graphicsContext.IsFullScreenVideo());
+  }
+  else
+    if (!force && !IsInScreenSaver())
+      ActivateScreenSaver();
+}
+
 void CApplication::Render()
 {
   // do not render if we are stopped or in background
@@ -2217,7 +2261,7 @@ void CApplication::Render()
 
   {
     // Less fps in DPMS
-    bool lowfps = m_dpmsIsActive || g_Windowing.EnableFrameLimiter();
+    bool lowfps = m_dpmsIsActive || g_Windowing.EnableFrameLimiter() || m_cecStandby;
     // Whether externalplayer is playing and we're unfocused
     bool extPlayerActive = m_pPlayer->GetCurrentPlayer() == EPC_EXTPLAYER && m_pPlayer->IsPlaying() && !m_AppFocused;
 
@@ -2245,6 +2289,8 @@ void CApplication::Render()
           ResetScreenSaver();  // Prevent screensaver dimming the screen
           singleFrameTime = 1000;  // 1 fps, high wakeup latency but v.low CPU usage
         }
+        else if (m_cecStandby)
+          singleFrameTime = 750;
         else if (lowfps)
           singleFrameTime = 200;  // 5 fps, <=200 ms latency to wake up
       }
@@ -5078,6 +5118,12 @@ void CApplication::Process()
   {
     m_slowTimer.Reset();
     ProcessSlow();
+
+    if (!g_application.m_bInitializing && m_cecStandbyRun > 0 && !(m_cecStandbyRun++ % 4))
+    {
+      SetCecStandby(false, true);
+      m_cecStandbyRun = -1;
+    }
   }
 
   g_cpuInfo.getUsedPercentage(); // must call it to recalculate pct values
diff --git a/xbmc/Application.h b/xbmc/Application.h
index 23fd4cf..a291b54 100644
--- a/xbmc/Application.h
+++ b/xbmc/Application.h
@@ -67,6 +67,8 @@ class CPlayerController;
 
 #include "ApplicationPlayer.h"
 
+#include "guilib/Resolution.h"
+
 class CSeekHandler;
 class CKaraokeLyricsManager;
 class CInertialScrollingHandler;
@@ -270,6 +272,7 @@ public:
 
   inline bool IsInScreenSaver() { return m_bScreenSave; };
   int m_iScreenSaveLock; // spiff: are we checking for a lock? if so, ignore the screensaver state, if -1 we have failed to input locks
+  RESOLUTION_INFO m_res;
 
   bool m_bPlaybackStarting;
   typedef enum
@@ -373,6 +373,8 @@ public:
   ReplayGainSettings& GetReplayGainSettings() { return m_replayGainSettings; }
 
   void SetLoggingIn(bool loggingIn) { m_loggingIn = loggingIn; }
+  void SetCecStandby(bool status, bool force = false);
+  bool GetCecStandby() { return m_cecStandby; }
 
 protected:
   virtual bool OnSettingsSaving() const;
@@ -390,6 +392,8 @@ protected:
   bool m_skinReverting;
 
   bool m_loggingIn;
+  bool m_cecStandby;
+  int m_cecStandbyRun;
 
 #if defined(TARGET_DARWIN_IOS)
   friend class CWinEventsIOS;
diff --git a/xbmc/peripherals/devices/PeripheralCecAdapter.cpp b/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
index 1a8fd59..7207988 100644
--- a/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
+++ b/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
@@ -170,6 +170,9 @@ void CPeripheralCecAdapter::Announce(AnnouncementFlag flag, const char *sender,
     {
       ActivateSource();
     }
+    // if we disable render on TV power on/off events, we have to enable it again screensaver off
+    // to get screen updates for VNC sessions
+    g_application.SetCecStandby(false);
   }
   else if (flag == GUI && !strcmp(sender, "xbmc") && !strcmp(message, "OnScreensaverActivated") && m_bIsReady)
   {
@@ -177,8 +180,10 @@ void CPeripheralCecAdapter::Announce(AnnouncementFlag flag, const char *sender,
     if ((!g_application.m_pPlayer->IsPlaying() && !g_application.m_pPlayer->IsPaused()) && m_configuration.bPowerOffScreensaver == 1)
     {
       // only power off when we're the active source
-      if (m_cecAdapter->IsLibCECActiveSource())
+      if (m_cecAdapter->IsLibCECActiveSource()) {
         StandbyDevices();
+        //g_application.SetCecStandby(true);
+      }
     }
   }
   else if (flag == System && !strcmp(sender, "xbmc") && !strcmp(message, "OnSleep"))
@@ -632,6 +637,10 @@ int CPeripheralCecAdapter::CecCommand(void *cbParam, const cec_command command)
         else if (adapter->m_configuration.bShutdownOnStandby == 1)
           CApplicationMessenger::Get().Shutdown();
       }
+      if (command.initiator == CECDEVICE_TV)
+      {
+        g_application.SetCecStandby(true);
+      }
       break;
     case CEC_OPCODE_SET_MENU_LANGUAGE:
       if (adapter->m_configuration.bUseTVMenuLanguage == 1 && command.initiator == CECDEVICE_TV && command.parameters.size == 3)
@@ -1153,6 +1169,9 @@ void CPeripheralCecAdapter::CecSourceActivated(void *cbParam, const CEC::cec_log
         CApplicationMessenger::Get().MediaPause();
     }
   }
+
+  if (activated != 1)
+    g_application.SetCecStandby(true);
 }
 
 int CPeripheralCecAdapter::CecLogMessage(void *cbParam, const cec_log_message message)
@@ -1582,6 +1598,8 @@ bool CPeripheralCecAdapterUpdateThread::SetInitialConfiguration(void)
 
   CSingleLock lock(m_critSection);
   m_bIsUpdating = false;
+
+  g_application.SetCecStandby(false, true);
   return true;
 }
 
diff --git a/xbmc/windowing/egl/WinSystemEGL.cpp b/xbmc/windowing/egl/WinSystemEGL.cpp
index dfc4672..1ca1cc3 100644
--- a/xbmc/windowing/egl/WinSystemEGL.cpp
+++ b/xbmc/windowing/egl/WinSystemEGL.cpp
@@ -18,6 +18,7 @@
  *
  */
 #include "system.h"
+#include "Application.h"
 
 #ifdef HAS_EGL
 
@@ -345,14 +359,6 @@ void CWinSystemEGL::UpdateResolutions()
     }
   }
 
-  /* ProbeResolutions includes already all resolutions.
-   * Only get desktop resolution so we can replace xbmc's desktop res
-   */
-  if (m_egl->GetNativeResolution(&curDisplay))
-    resDesktop = curDisplay;
-
-
-  RESOLUTION ResDesktop = RES_INVALID;
   RESOLUTION res_index  = RES_DESKTOP;
 
   for (size_t i = 0; i < resolutions.size(); i++)
@@ -377,6 +383,22 @@ void CWinSystemEGL::UpdateResolutions()
       resolutions[i].dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "",
       resolutions[i].fRefreshRate);
 
+    res_index = (RESOLUTION)((int)res_index + 1);
+  }
+
+  /* ProbeResolutions includes already all resolutions.
+   * Only get desktop resolution so we can replace xbmc's desktop res
+   */
+  if (!g_application.m_res.strMode.empty())
+    resDesktop = g_application.m_res;
+  else if (CDisplaySettings::Get().GetDisplayResolution() != RES_DESKTOP)
+    resDesktop = CDisplaySettings::Get().GetResolutionInfo(CDisplaySettings::Get().GetDisplayResolution());
+  else if (m_egl->GetNativeResolution(&curDisplay))
+    resDesktop = curDisplay;
+
+  RESOLUTION ResDesktop = RES_INVALID;
+
+  for (size_t i = 0; i < resolutions.size(); i++)
     if(resDesktop.iWidth == resolutions[i].iWidth &&
        resDesktop.iHeight == resolutions[i].iHeight &&
        resDesktop.iScreenWidth == resolutions[i].iScreenWidth &&
@@ -384,12 +406,9 @@ void CWinSystemEGL::UpdateResolutions()
        (resDesktop.dwFlags & D3DPRESENTFLAG_MODEMASK) == (resolutions[i].dwFlags & D3DPRESENTFLAG_MODEMASK) &&
        fabs(resDesktop.fRefreshRate - resolutions[i].fRefreshRate) < FLT_EPSILON)
     {
-      ResDesktop = res_index;
+      ResDesktop = (RESOLUTION)(i + (int)RES_DESKTOP);
     }
 
-    res_index = (RESOLUTION)((int)res_index + 1);
-  }
-
   // swap desktop index for desktop res if available
   if (ResDesktop != RES_INVALID)
   {
diff --git a/xbmc/settings/Settings.cpp b/xbmc/settings/Settings.cpp
index b09d61b..bb374e3 100644
--- a/xbmc/settings/Settings.cpp
+++ b/xbmc/settings/Settings.cpp
@@ -1031,6 +1031,7 @@ void CSettings::InitializeISettingCallbacks()
   settingSet.insert("videoscreen.screenmode");
   settingSet.insert("videoscreen.vsync");
   m_settingsManager->RegisterCallback(&CDisplaySettings::Get(), settingSet);
+  m_settingsManager->RegisterCallback(&g_application, settingSet);
 
   settingSet.clear();
   settingSet.insert("videoscreen.stereoscopicmode");
