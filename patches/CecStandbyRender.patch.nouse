commit 5e1284136211e73df6468842e6130cce2ef94e23
Author: Matus Kral <matuskral@me.com>
Date:   Wed Jul 30 00:35:47 2014 +0200

    on TV going standby or inactive source, renderer is forced to lowfps saving lot CPU cycles

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index 415e4c2..f82872e 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -407,6 +407,8 @@ CApplication::CApplication(void)
   m_ePlayState = PLAY_STATE_NONE;
   m_skinReverting = false;
   m_loggingIn = false;
+  m_cecStandby = false;
+  m_cecStandbyRun = 0;
 
 #ifdef HAS_GLX
   XInitThreads();
@@ -469,7 +471,10 @@ bool CApplication::OnEvent(XBMC_Event& newEvent)
   {
     case XBMC_QUIT:
       if (!g_application.m_bStop)
+      {
+        g_application.SetCecStandby(false);
         CApplicationMessenger::Get().Quit();
+      }
       break;
     case XBMC_KEYDOWN:
       g_application.OnKey(g_Keyboard.ProcessKeyDown(newEvent.key.keysym));
@@ -2201,6 +2201,50 @@ float CApplication::GetDimScreenSaverLevel() const
   return 100.0f;
 }
 
+void CApplication::SetCecStandby(bool status, bool force)
+{
+  if (force && g_application.m_bInitializing)
+  {
+    m_cecStandbyRun++;
+    return;
+  }
+
+  if (status == m_cecStandby && !force)
+    return;
+
+  CLog::Log(LOGDEBUG, "%s is %x, se %d, sa %d", __FUNCTION__, (int)status, m_screenSaver ? 1:0, m_bScreenSave);
+
+  m_cecStandby = status;
+  if (g_application.m_bStop)
+    return;
+
+  SetRenderGUI(!status);
+  if (!status)
+  {
+    if (m_bScreenSave)
+    {
+      ResetScreenSaver();
+      WakeUpScreenSaverAndDPMS();
+    }
+    if (m_cecStandbyRun < 0) return;
+    g_Windowing.UpdateResolutions();
+#ifdef TARGET_RASPBERRY_PI
+    //g_Windowing.ResizeWindow(g_Windowing.GetWidth(), g_Windowing.GetHeight(), 0, 0);
+#endif
+#ifdef HAS_IMXVPU
+    /*RESOLUTION newRes = (RESOLUTION)g_Windowing.DesktopResolution(g_Windowing.GetCurrentScreen());
+
+    eglSwapInterval(g_Windowing.GetEGLDisplay(), 1);
+    EGLint result = eglGetError();
+    if(result != EGL_SUCCESS)
+      CLog::Log(LOGERROR, "EGL error in %s: %x",__FUNCTION__, result);*/
+#endif
+  }
+  else
+    if (!m_bScreenSave)
+      ActivateScreenSaver();
+}
+
 void CApplication::Render()
 {
   // do not render if we are stopped or in background
@@ -2217,7 +2261,7 @@ void CApplication::Render()
 
   {
     // Less fps in DPMS
-    bool lowfps = m_dpmsIsActive || g_Windowing.EnableFrameLimiter();
+    bool lowfps = m_dpmsIsActive || g_Windowing.EnableFrameLimiter() || m_cecStandby;
     // Whether externalplayer is playing and we're unfocused
     bool extPlayerActive = m_pPlayer->GetCurrentPlayer() == EPC_EXTPLAYER && m_pPlayer->IsPlaying() && !m_AppFocused;
 
@@ -2245,6 +2289,8 @@ void CApplication::Render()
           ResetScreenSaver();  // Prevent screensaver dimming the screen
           singleFrameTime = 1000;  // 1 fps, high wakeup latency but v.low CPU usage
         }
+        else if (m_cecStandby)
+          singleFrameTime = 500;
         else if (lowfps)
           singleFrameTime = 200;  // 5 fps, <=200 ms latency to wake up
       }
@@ -5072,6 +5120,14 @@ void CApplication::Process()
   {
     m_slowTimer.Reset();
     ProcessSlow();
+
+#if 1
+    if (!g_application.m_bInitializing && m_cecStandbyRun > 0 && !(m_cecStandbyRun++ % 4))
+    {
+      SetCecStandby(false, true);
+      m_cecStandbyRun = -1;
+    }
+#endif
   }
 
   g_cpuInfo.getUsedPercentage(); // must call it to recalculate pct values
diff --git a/xbmc/Application.h b/xbmc/Application.h
index 23fd4cf..a291b54 100644
--- a/xbmc/Application.h
+++ b/xbmc/Application.h
@@ -373,6 +373,8 @@ public:
   ReplayGainSettings& GetReplayGainSettings() { return m_replayGainSettings; }
 
   void SetLoggingIn(bool loggingIn) { m_loggingIn = loggingIn; }
+  void SetCecStandby(bool status, bool force = false);
+  bool GetCecStandby() { return m_cecStandby; }
 
 protected:
   virtual bool OnSettingsSaving() const;
@@ -390,6 +392,8 @@ protected:
   bool m_skinReverting;
 
   bool m_loggingIn;
+  bool m_cecStandby;
+  int m_cecStandbyRun;
 
 #if defined(TARGET_DARWIN_IOS)
   friend class CWinEventsIOS;
diff --git a/xbmc/peripherals/devices/PeripheralCecAdapter.cpp b/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
index 1a8fd59..7207988 100644
--- a/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
+++ b/xbmc/peripherals/devices/PeripheralCecAdapter.cpp
@@ -170,6 +170,9 @@ void CPeripheralCecAdapter::Announce(AnnouncementFlag flag, const char *sender,
     {
       ActivateSource();
     }
+    // if we disable render on TV power on/off events, we have to enable it again screensaver off
+    // to get screen updates for VNC sessions
+    g_application.SetCecStandby(false);
   }
   else if (flag == GUI && !strcmp(sender, "xbmc") && !strcmp(message, "OnScreensaverActivated") && m_bIsReady)
   {
@@ -177,8 +180,10 @@ void CPeripheralCecAdapter::Announce(AnnouncementFlag flag, const char *sender,
     if ((!g_application.m_pPlayer->IsPlaying() && !g_application.m_pPlayer->IsPaused()) && m_configuration.bPowerOffScreensaver == 1)
     {
       // only power off when we're the active source
-      if (m_cecAdapter->IsLibCECActiveSource())
+      if (m_cecAdapter->IsLibCECActiveSource()) {
         StandbyDevices();
+        g_application.SetCecStandby(true);
+      }
     }
   }
   else if (flag == System && !strcmp(sender, "xbmc") && !strcmp(message, "OnSleep"))
@@ -632,6 +637,10 @@ int CPeripheralCecAdapter::CecCommand(void *cbParam, const cec_command command)
         else if (adapter->m_configuration.bShutdownOnStandby == 1)
           CApplicationMessenger::Get().Shutdown();
       }
+      if (command.initiator == CECDEVICE_TV)
+      {
+        g_application.SetCecStandby(true);
+      }
       break;
     case CEC_OPCODE_SET_MENU_LANGUAGE:
       if (adapter->m_configuration.bUseTVMenuLanguage == 1 && command.initiator == CECDEVICE_TV && command.parameters.size == 3)
@@ -1151,7 +1160,14 @@ void CPeripheralCecAdapter::CecSourceActivated(void *cbParam, const CEC::cec_log
 
   // wake up the screensaver, so the user doesn't switch to a black screen
   if (activated == 1)
+  {
+    g_application.SetCecStandby(false);
     g_application.WakeUpScreenSaverAndDPMS();
+  }
+  else
+  {
+    g_application.SetCecStandby(true);
+  }
 
   if (adapter->GetSettingBool("pause_playback_on_deactivate"))
   {
@@ -1582,6 +1598,8 @@ bool CPeripheralCecAdapterUpdateThread::SetInitialConfiguration(void)
 
   CSingleLock lock(m_critSection);
   m_bIsUpdating = false;
+
+  g_application.SetCecStandby(false, true);
   return true;
 }
 
