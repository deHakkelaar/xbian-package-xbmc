commit eaa49e4a0750a5f63fb8f3d26bb01e9b58ea7a9b
Author: Matus Kral <matuskral@me.com>
Date:   Mon Nov 17 11:00:28 2014 +0100

    IMX6 repatch:
    - fixed resolution changes EGL errors
    - allows GUI res other than RES_DESKTOP to work properly
        (GUI is not clamped improperly to boot RES_DESKTOP
         resolution on EGL resets - HDMI routing changes etc)
    - allows DVI resolutions (not with HDMI-SOC as sound output)

diff --git a/xbmc/cores/VideoRenderers/BaseRenderer.cpp b/xbmc/cores/VideoRenderers/BaseRenderer.cpp
index 83c3adb..46be187 100644
--- a/xbmc/cores/VideoRenderers/BaseRenderer.cpp
+++ b/xbmc/cores/VideoRenderers/BaseRenderer.cpp
@@ -34,6 +34,7 @@
 #include "settings/AdvancedSettings.h"
 #include "cores/VideoRenderers/RenderFlags.h"
 
+#include "cores/AudioEngine/AEFactory.h"
 
 CBaseRenderer::CBaseRenderer()
 {
@@ -97,8 +98,11 @@ void CBaseRenderer::ChooseBestResolution(float fps)
   }
   else
 #endif
-    CLog::Log(LOGNOTICE, "Display resolution %s : %s (%d)",
-        m_resolution == RES_DESKTOP ? "DESKTOP" : "USER", g_graphicsContext.GetResInfo(m_resolution).strMode.c_str(), m_resolution);
+  {
+    CAEFactory::DeviceChange();
+    CLog::Log(LOGNOTICE, "Display resolution KEPT : %s (%d)",
+        g_graphicsContext.GetResInfo(m_resolution).strMode.c_str(), m_resolution);
+  }
 }
 
 bool CBaseRenderer::FindResolutionFromOverride(float fps, float& weight, bool fallback)
diff --git a/xbmc/windowing/egl/EGLNativeTypeIMX.cpp b/xbmc/windowing/egl/EGLNativeTypeIMX.cpp
index 04cadc8..149591c 100644
--- a/xbmc/windowing/egl/EGLNativeTypeIMX.cpp
+++ b/xbmc/windowing/egl/EGLNativeTypeIMX.cpp
@@ -18,7 +18,6 @@
  *
  */
 
-#include "system.h"
 #include <EGL/egl.h>
 
 #include "EGLNativeTypeIMX.h"
@@ -33,6 +33,7 @@
 #include "windowing/WindowingFactory.h"
 #include "cores/AudioEngine/AEFactory.h"
 #include <fstream>
+#include "settings/Settings.h"
 
 CEGLNativeTypeIMX::CEGLNativeTypeIMX()
   : m_display(NULL)
 
@@ -38,6 +37,8 @@ CEGLNativeTypeIMX::CEGLNativeTypeIMX()
   : m_display(NULL)
   , m_window(NULL)
 {
+  m_show = true;
+  m_readonly = true;
 }
 
 CEGLNativeTypeIMX::~CEGLNativeTypeIMX()
@@ -61,33 +62,23 @@ void CEGLNativeTypeIMX::Initialize()
     return;
   }
 
-  // Unblank the fb
-  if (ioctl(fd, FBIOBLANK, 0) < 0)
-  {
-    CLog::Log(LOGERROR, "%s - Error while unblanking fb0.\n", __FUNCTION__);
-  }
-
-  close(fd);
+  CSettings::Get().SetInt("audiooutput.streamsilence", 0);
 
   // Check if we can change the framebuffer resolution
-  fd = open("/sys/class/graphics/fb0/mode", O_RDWR);
-  if (fd >= 0)
+  if ((fd = open("/sys/class/graphics/fb0/mode", O_RDWR)) >= 0)
   {
-    CLog::Log(LOGNOTICE, "%s - graphics sysfs is writable", __FUNCTION__);
     m_readonly = false;
+    close(fd);
+    get_sysfs_str("/sys/class/graphics/fb0/mode", m_init);
   }
-  else
-  {
-    CLog::Log(LOGNOTICE, "%s - graphics sysfs is read-only", __FUNCTION__);
-    m_readonly = true;
-  }
-  close(fd);
 
+  ShowWindow(false);
   return;
 }
 
 void CEGLNativeTypeIMX::Destroy()
 {
+  CLog::Log(LOGDEBUG, "%s\n", __FUNCTION__);
   struct fb_fix_screeninfo fixed_info;
   void *fb_buffer;
   int fd;
@@ -115,16 +106,28 @@ void CEGLNativeTypeIMX::Destroy()
   close(fd);
 
   return;
+
+  if (!m_readonly)
+  {
+    CLog::Log(LOGDEBUG, "%s changing mode to %s\n", __FUNCTION__, m_init.c_str());
+    set_sysfs_str("/sys/class/graphics/fb0/mode", m_init);
+  }
+
+  return;
 }
 
 bool CEGLNativeTypeIMX::CreateNativeDisplay()
 {
+  CLog::Log(LOGDEBUG,": %s", __FUNCTION__);
+#ifdef HAS_IMXVPU
+  if (m_display)
+    return true;
+
   // Force double-buffering
   CEnvironment::setenv("FB_MULTI_BUFFER", "2", 0);
-
-#ifdef HAS_IMXVPU
   // EGL will be rendered on fb0
-  m_display = fbGetDisplayByIndex(0);
+  if (!(m_display = fbGetDisplayByIndex(0)))
+    return false;
   m_nativeDisplay = &m_display;
   return true;
 #else
@@ -134,8 +137,14 @@ bool CEGLNativeTypeIMX::CreateNativeDisplay()
 
 bool CEGLNativeTypeIMX::CreateNativeWindow()
 {
+  CLog::Log(LOGDEBUG,": %s", __FUNCTION__);
 #ifdef HAS_IMXVPU
-  m_window = fbCreateWindow(m_display, 0, 0, 0, 0);
+  if (m_window)
+    return true;
+
+  if (!(m_window = fbCreateWindow(m_display, 0, 0, 0, 0)))
+    return false;
+
   m_nativeWindow = &m_window;
   return true;
 #else
@@ -145,8 +154,6 @@ bool CEGLNativeTypeIMX::CreateNativeWindow()
 
 bool CEGLNativeTypeIMX::GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const
 {
-  if (!nativeDisplay)
-    return false;
   if (!m_nativeDisplay)
     return false;
   *nativeDisplay = (XBNativeDisplayType*)m_nativeDisplay;
@@ -155,9 +162,7 @@ bool CEGLNativeTypeIMX::GetNativeDisplay(XBNativeDisplayType **nativeDisplay) co
 
 bool CEGLNativeTypeIMX::GetNativeWindow(XBNativeWindowType **nativeWindow) const
 {
-  if (!nativeWindow)
-    return false;
-  if (!m_nativeWindow || !m_window)
+  if (!m_nativeWindow)
     return false;
   *nativeWindow = (XBNativeWindowType*)m_nativeWindow;
   return true;
@@ -165,10 +170,12 @@ bool CEGLNativeTypeIMX::GetNativeWindow(XBNativeWindowType **nativeWindow) const
 
 bool CEGLNativeTypeIMX::DestroyNativeDisplay()
 {
+  CLog::Log(LOGDEBUG,": %s", __FUNCTION__);
 #ifdef HAS_IMXVPU
   if (m_display)
     fbDestroyDisplay(m_display);
-  m_display =  NULL;
+  m_display = NULL;
+  m_nativeDisplay = NULL;
   return true;
 #else
   return false;
@@ -177,10 +184,12 @@ bool CEGLNativeTypeIMX::DestroyNativeDisplay()
 
 bool CEGLNativeTypeIMX::DestroyNativeWindow()
 {
+  CLog::Log(LOGDEBUG,": %s", __FUNCTION__);
 #ifdef HAS_IMXVPU
   if (m_window)
     fbDestroyWindow(m_window);
-  m_window =  NULL;
+  m_window = NULL;
+  m_nativeWindow = NULL;
   return true;
 #else
   return false;
@@ -191,6 +200,8 @@ bool CEGLNativeTypeIMX::GetNativeResolution(RESOLUTION_INFO *res) const
 {
   std::string mode;
   get_sysfs_str("/sys/class/graphics/fb0/mode", mode);
+  CLog::Log(LOGDEBUG,": %s, %s", __FUNCTION__, mode.c_str());
+
   return ModeToResolution(mode, res);
 }
 
@@ -202,23 +213,37 @@ bool CEGLNativeTypeIMX::SetNativeResolution(const RESOLUTION_INFO &res)
   std::string mode;
   get_sysfs_str("/sys/class/graphics/fb0/mode", mode);
   if (res.strId == mode)
-    return false;
+  {
+    CLog::Log(LOGDEBUG,": %s - not changing res (%s vs %s)", __FUNCTION__, res.strId.c_str(), mode.c_str());
+    return true;
+  }
 
   DestroyNativeWindow();
   DestroyNativeDisplay();
 
-  set_sysfs_str("/sys/class/graphics/fb0/mode", res.strId);
-
+  ShowWindow(false);
+  CLog::Log(LOGDEBUG,": %s - changing resolution to %s", __FUNCTION__, res.strId.c_str());
+  set_sysfs_str("/sys/class/graphics/fb0/mode", res.strId.c_str());
   CreateNativeDisplay();
-
-  CLog::Log(LOGDEBUG, "%s: %s",__FUNCTION__, res.strId.c_str());
-
-  // Reset AE
-  CAEFactory::DeviceChange();
+  CreateNativeWindow();
 
   return true;
 }
 
+bool CEGLNativeTypeIMX::FindMatchingResolution(const RESOLUTION_INFO &res, const std::vector<RESOLUTION_INFO> &resolutions)
+{
+  for (int i = 0; i < (int)resolutions.size(); i++)
+  {
+    if(resolutions[i].iScreenWidth == res.iScreenWidth &&
+       resolutions[i].iScreenHeight == res.iScreenHeight &&
+       resolutions[i].fRefreshRate == res.fRefreshRate)
+    {
+       return true;
+    }
+  }
+  return false;
+}
+
 bool CEGLNativeTypeIMX::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
 {
   if (m_readonly)
@@ -233,10 +258,11 @@ bool CEGLNativeTypeIMX::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutio
   RESOLUTION_INFO res;
   for (size_t i = 0; i < probe_str.size(); i++)
   {
-    if(!StringUtils::StartsWith(probe_str[i], "S:"))
+    if(!StringUtils::StartsWith(probe_str[i], "S:") && !StringUtils::StartsWith(probe_str[i], "U:"))
       continue;
     if(ModeToResolution(probe_str[i], &res))
-      resolutions.push_back(res);
+      if(!FindMatchingResolution(res, resolutions))
+         resolutions.push_back(res);
   }
   return resolutions.size() > 0;
 }
@@ -248,48 +274,54 @@ bool CEGLNativeTypeIMX::GetPreferredResolution(RESOLUTION_INFO *res) const
 
 bool CEGLNativeTypeIMX::ShowWindow(bool show)
 {
-  // Force vsync by default
-  eglSwapInterval(g_Windowing.GetEGLDisplay(), 1);
-  EGLint result = eglGetError();
-  if(result != EGL_SUCCESS)
-    CLog::Log(LOGERROR, "EGL error in %s: %x",__FUNCTION__, result);
+  if (m_show == show)
+    return true;
 
-  return false;
+  CLog::Log(LOGDEBUG, ": %s %s", __FUNCTION__, show?"show":"hide");
+
+  set_sysfs_str("/sys/class/graphics/fb0/blank", show?"0":"1");
+  m_show = show;
+
+  if(show)
+    CAEFactory::DeviceChange();
+
+  return true;
 }
 
-int CEGLNativeTypeIMX::get_sysfs_str(std::string path, std::string& valstr) const
+bool CEGLNativeTypeIMX::get_sysfs_str(std::string path, std::string& valstr) const
 {
   int len;
   char buf[256] = {0};
 
   int fd = open(path.c_str(), O_RDONLY);
-  if (fd >= 0)
-  {
-    while ((len = read(fd, buf, 255)) > 0)
-      valstr.append(buf, len);
-    close(fd);
-  }
-  else
+  if (fd < 0)
   {
     CLog::Log(LOGERROR, "%s: error reading %s",__FUNCTION__, path.c_str());
     valstr = "fail";
-    return -1;
+    return false;
   }
-  return 0;
+
+  while ((len = read(fd, buf, 255)) > 0)
+    valstr.append(buf, len);
+  close(fd);
+
+  return true;
 }
 
-int CEGLNativeTypeIMX::set_sysfs_str(std::string path, std::string val) const
+bool CEGLNativeTypeIMX::set_sysfs_str(std::string path, std::string val) const
 {
   int fd = open(path.c_str(), O_WRONLY);
-  if (fd >= 0)
+  if (fd < 0)
   {
-    val += '\n';
-    write(fd, val.c_str(), val.size());
-    close(fd);
-    return 0;
+    CLog::Log(LOGERROR, "%s: error writing %s",__FUNCTION__, path.c_str());
+    return false;
   }
-  CLog::Log(LOGERROR, "%s: error writing %s",__FUNCTION__, path.c_str());
-  return -1;
+
+  val += '\n';
+  write(fd, val.c_str(), val.size());
+  close(fd);
+
+  return true;
 }
 
 bool CEGLNativeTypeIMX::ModeToResolution(std::string mode, RESOLUTION_INFO *res) const
diff --git a/xbmc/windowing/egl/EGLNativeTypeIMX.h b/xbmc/windowing/egl/EGLNativeTypeIMX.h
index c95dcfb..8444301 100644
--- a/xbmc/windowing/egl/EGLNativeTypeIMX.h
+++ b/xbmc/windowing/egl/EGLNativeTypeIMX.h
@@ -46,13 +46,16 @@ public:
   virtual bool  ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions);
   virtual bool  GetPreferredResolution(RESOLUTION_INFO *res) const;
 
-  virtual bool  ShowWindow(bool show);
+  virtual bool  ShowWindow(bool show = true);
 
 protected:
   bool m_readonly;
-  int get_sysfs_str(std::string path, std::string& valstr) const;
-  int set_sysfs_str(std::string path, std::string val) const;
+  bool m_show;
+  std::string m_init;
+  bool get_sysfs_str(std::string path, std::string& valstr) const;
+  bool set_sysfs_str(std::string path, std::string val) const;
   bool ModeToResolution(std::string mode, RESOLUTION_INFO *res) const;
+  bool FindMatchingResolution(const RESOLUTION_INFO &res, const std::vector<RESOLUTION_INFO> &resolutions);
 
   EGLNativeDisplayType m_display;
   EGLNativeWindowType  m_window;
diff --git a/xbmc/windowing/egl/WinSystemEGL.cpp b/xbmc/windowing/egl/WinSystemEGL.cpp
index d2a94c9..af25897 100644
--- a/xbmc/windowing/egl/WinSystemEGL.cpp
+++ b/xbmc/windowing/egl/WinSystemEGL.cpp
@@ -18,6 +18,7 @@
  *
  */
 #include "system.h"
+#include "Application.h"
 
 #ifdef HAS_EGL
 
@@ -111,7 +111,7 @@ bool CWinSystemEGL::InitWindowSystem()
         EGL_GREEN_SIZE,      8,
         EGL_BLUE_SIZE,       8,
         EGL_ALPHA_SIZE,      8,
-        EGL_DEPTH_SIZE,     16,
+        EGL_DEPTH_SIZE,     24,
         EGL_STENCIL_SIZE,    0,
         EGL_SAMPLE_BUFFERS,  0,
         EGL_SAMPLES,         0,
@@ -151,6 +151,15 @@ bool CWinSystemEGL::CreateWindow(RESOLUTION_INFO &res)
   if(m_egl)
     m_egl->SetNativeResolution(res);
 
+#ifdef HAS_IMXVPU
+  if (m_context != EGL_NO_CONTEXT )
+    if (!m_egl->InitDisplay(&m_display))
+    {
+      CLog::Log(LOGERROR, "%s: Could not reinit display",__FUNCTION__);
+      return false;
+    }
+#endif
+
   if (!m_egl->CreateSurface(m_display, m_config, &m_surface))
   {
     CLog::Log(LOGNOTICE, "%s: Could not create a surface. Trying with a fresh Native Window.",__FUNCTION__);
@@ -392,12 +401,21 @@ void CWinSystemEGL::UpdateResolutions()
        (resDesktop.dwFlags & D3DPRESENTFLAG_MODEMASK) == (resolutions[i].dwFlags & D3DPRESENTFLAG_MODEMASK) &&
        fabs(resDesktop.fRefreshRate - resolutions[i].fRefreshRate) < FLT_EPSILON)
     {
+      CLog::Log(LOGNOTICE, "Found resolution -- current active resolution %d\n", (int)res_index);
       ResDesktop = res_index;
     }
 
     res_index = (RESOLUTION)((int)res_index + 1);
   }
 
+#ifdef HAS_IMXVPU
+  /*if (g_application.IsPlayingFullScreenVideo())
+    return;*/
+
+  if (CDisplaySettings::Get().GetDisplayResolution() != RES_DESKTOP)
+    ResDesktop = CDisplaySettings::Get().GetDisplayResolution();
+  resDesktop = CDisplaySettings::Get().GetResolutionInfo(ResDesktop);
+#endif
   // swap desktop index for desktop res if available
   if (ResDesktop != RES_INVALID)
   {
