--- a/xbmc/input/MouseStat.cpp	2014-08-24 18:41:38.000000000 +0300
+++ b/xbmc/input/MouseStat.cpp	2014-09-02 00:05:05.328878858 +0300
@@ -20,10 +20,14 @@
 
 #include "MouseStat.h"
 #include "guilib/Key.h"
+#include "guilib/GraphicContext.h"
+#include "guilib/GUIWindowManager.h"
 #include "settings/lib/Setting.h"
 #include "utils/TimeUtils.h"
 #include "windowing/WindowingFactory.h"
 
+extern uint32_t click_confines;
+
 CMouseStat::CMouseStat()
 {
   m_pointerState = MOUSE_STATE_NORMAL;
@@ -56,26 +60,34 @@
 
 void CMouseStat::HandleEvent(XBMC_Event& newEvent)
 {
+  int dx = 0;
+  int dy = 0;
+  int ignore_action = 0;
+
+  /* [Touch screens fix] Ignore actions if the pointer is outside of the screen area */
+  if(newEvent.motion.x > g_graphicsContext.GetWidth() || 
+      newEvent.motion.y > g_graphicsContext.GetHeight())
+  {
+    //CLog::Log(LOGWARNING, "[AI] step 1: m_mouseState(%d,%d) newEvnt.motion(%d,%d)\n",
+    //  m_mouseState.x, m_mouseState.y, newEvent.motion.x, newEvent.motion.y
+    //);
+    //printf("[AI] step 1: m_mouseState(%d,%d) newEvnt.motion(%d,%d)\n",
+    //  m_mouseState.x, m_mouseState.y, newEvent.motion.x, newEvent.motion.y
+    //);
+    ignore_action = 1;
+    newEvent.button.button = XBMC_BUTTON_LEFT;
+    newEvent.button.type = XBMC_MOUSEBUTTONDOWN;
+  }
   // Save the mouse position and the size of the last move
-  int dx, dy;
-  if (newEvent.type == XBMC_MOUSEMOTION)
+  else
   {
     dx = newEvent.motion.x - m_mouseState.x;
+    m_mouseState.dx = dx;
+    m_mouseState.x  = m_mouseState.x + dx;
     dy = newEvent.motion.y - m_mouseState.y;
+    m_mouseState.dy = dy;
+    m_mouseState.y  = m_mouseState.y + dy;
   }
-  else if (newEvent.type == XBMC_MOUSEBUTTONDOWN || newEvent.type == XBMC_MOUSEBUTTONUP)
-  {
-    dx = newEvent.button.x - m_mouseState.x;
-    dy = newEvent.button.y - m_mouseState.y;
-  }
-  else
-  {
-    return;
-  }
-  m_mouseState.dx = dx;
-  m_mouseState.dy = dy;
-  m_mouseState.x  = std::max(0, std::min(m_maxX, m_mouseState.x + dx));
-  m_mouseState.y  = std::max(0, std::min(m_maxY, m_mouseState.y + dy));
 
   // Fill in the public members
   if (newEvent.button.type == XBMC_MOUSEBUTTONDOWN)
@@ -113,7 +125,21 @@
 
     // CButtonState::Update does the hard work of checking the button state
     // and spotting drags, doubleclicks etc
-    CButtonState::BUTTON_ACTION action = m_buttonState[i].Update(now, m_mouseState.x, m_mouseState.y, m_mouseState.button[i]);
+    CButtonState::BUTTON_ACTION action = CButtonState::MB_NONE;
+
+    if(!ignore_action)
+    {
+      action = m_buttonState[i].Update(now, m_mouseState.x, m_mouseState.y, m_mouseState.button[i]);
+	}
+
+    /* Store raw action */
+    m_RawAction = (uint32_t)action;
+    printf("%d-%d\n\r", i, m_RawAction);
+
+    //CLog::Log(LOGWARNING, "[AI]: |   (%d)dx,dy:(%d,%d),newEvent.motion:(%d,%d)\n",
+    //  i, dx, dy, newEvent.motion.x, newEvent.motion.y);
+    //CLog::Log(LOGWARNING, "[AI]: |   (%d)m_mouseState(%d,%d),m_mouseState.button[i]:%d,action:%d",
+    //  i, m_mouseState.x, m_mouseState.y, m_mouseState.button[i], action);
     switch (action)
     {
     case CButtonState::MB_SHORT_CLICK:
@@ -234,6 +260,16 @@
   return (m_mouseState.dx * m_mouseState.dx + m_mouseState.dy * m_mouseState.dy >= MOUSE_MINIMUM_MOVEMENT * MOUSE_MINIMUM_MOVEMENT);
 }
 
+uint32_t CMouseStat::GetRawAction() const
+{
+  return m_RawAction;
+}
+
+uint32_t CMouseStat::GetAction() const
+{
+  return m_Action;
+}
+
 uint32_t CMouseStat::GetKey() const
 {
   return m_Key;
@@ -331,3 +367,4 @@
   return MB_NONE;
 }
 
+
