commit 31716e14bce52c2cc4b40fb337400c42d5632af2
Author: Matus Kral <matuskral@me.com>
Date:   Tue Aug 5 09:02:59 2014 +0200

    audio depends fully on HDMIFB(imx6) - start only after windowing and GUI renderer

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index c77d0f0..f158f8c 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -843,23 +843,9 @@ bool CApplication::Create()
     return false;
   }
 
-  // start the AudioEngine
-  if (!CAEFactory::StartEngine())
-  {
-    CLog::Log(LOGFATAL, "CApplication::Create: Failed to start the AudioEngine");
-    return false;
-  }
-
-  // restore AE's previous volume state
-  SetHardwareVolume(m_volumeLevel);
-  CAEFactory::SetMute     (m_muted);
-  CAEFactory::SetSoundMode(CSettings::Get().GetInt("audiooutput.guisoundmode"));
-
-  // initialize m_replayGainSettings
-  m_replayGainSettings.iType = CSettings::Get().GetInt("musicplayer.replaygaintype");
-  m_replayGainSettings.iPreAmp = CSettings::Get().GetInt("musicplayer.replaygainpreamp");
-  m_replayGainSettings.iNoGainPreAmp = CSettings::Get().GetInt("musicplayer.replaygainnogainpreamp");
-  m_replayGainSettings.bAvoidClipping = CSettings::Get().GetBool("musicplayer.replaygainavoidclipping");
+#ifndef HAS_IMXVPU
+  StartSound();
+#endif
 
   // initialize the addon database (must be before the addon manager is init'd)
   CDatabaseManager::Get().Initialize(true);
@@ -908,6 +894,29 @@ bool CApplication::Create()
   return true;
 }
 
+bool CApplication::StartSound()
+{
+  // start the AudioEngine
+  if (!CAEFactory::StartEngine())
+  {
+    CLog::Log(LOGFATAL, "CApplication::Create: Failed to start the AudioEngine");
+    return false;
+  }
+
+  // restore AE's previous volume state
+  SetHardwareVolume(m_volumeLevel);
+  CAEFactory::SetMute     (m_muted);
+  CAEFactory::SetSoundMode(CSettings::Get().GetInt("audiooutput.guisoundmode"));
+
+  // initialize m_replayGainSettings
+  m_replayGainSettings.iType = CSettings::Get().GetInt("musicplayer.replaygaintype");
+  m_replayGainSettings.iPreAmp = CSettings::Get().GetInt("musicplayer.replaygainpreamp");
+  m_replayGainSettings.iNoGainPreAmp = CSettings::Get().GetInt("musicplayer.replaygainnogainpreamp");
+  m_replayGainSettings.bAvoidClipping = CSettings::Get().GetBool("musicplayer.replaygainavoidclipping");
+
+  return true;
+}
+
 bool CApplication::CreateGUI(bool showXBMCSplash)
 {
   m_renderGUI = true;
diff --git a/xbmc/Application.h b/xbmc/Application.h
index bd3bec9..4db2ab9 100644
--- a/xbmc/Application.h
+++ b/xbmc/Application.h
@@ -192,6 +192,7 @@ public:
   void CheckPlayingProgress();
   void ActivateScreenSaver(bool forceType = false);
   void CloseNetworkShares();
+  bool StartSound();
 
   virtual void Process();
   void ProcessSlow();
diff --git a/xbmc/xbmc.cpp b/xbmc/xbmc.cpp
index 2cf09b0..ecf63d1 100644
--- a/xbmc/xbmc.cpp
+++ b/xbmc/xbmc.cpp
@@ -68,6 +68,10 @@ extern "C" int XBMC_Run(bool renderGUI)
     fprintf(stderr, "ERROR: Unable to create GUI. Exiting\n");
     return status;
   }
+#ifdef HAS_IMXVPU
+  else
+    g_application.StartSound();
+#endif
   if (!g_application.Initialize())
   {
     fprintf(stderr, "ERROR: Unable to Initialize. Exiting\n");
